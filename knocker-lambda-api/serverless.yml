service: knocker-lambda

# enable required plugins, in order to make what we want
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

# serverless supports different cloud environments to run at.
# we will be deploying and running this project at AWS cloud with Node v8.10 environment
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Resources:
    Player:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

# here we describe our lambda function
functions:
  knocker-graphql-api: # function name  ##this will be eventually changed
    handler: src/handler.main
    #handler: src/index.grapqlHandler # where the actual code is located
    # to call our function from outside, we need to expose it to the outer world
    # in order to do so, we create a REST endpoint
    events:
      - http:
          path: knocker-api # path for the endpoint
          method: any # HTTP method for the endpoint
          cors: true

custom:
  webpack:
    webpackConfig: "webpack.config.js" # name of webpack configuration file
    includeModules: true # add excluded modules to the bundle
    packager: "npm" # Packager that will be used to package your external modules
