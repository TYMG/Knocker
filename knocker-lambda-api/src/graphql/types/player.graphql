type User {
  id: ID
  username: String
  name: String
  location: String
  roles: [String]
  playedMachines: [PlayedMachine]
  scores: [Score]
  visitedLocations: [LocationVisited]
  favoritePins: [FavoritePin]
  favoriteGames: [FavoriteGame]
  email: String
}

type Score {
  score: String!
  pinId: String
  locationId: String
  locationMachineXrefId: String
  date:String
  s3RefId:String
  isVerified:String

}
input ScoreInput {
  score: String
  locationMachineXrefId: String
  pinId: String
  locationId: Int
  s3RefId: String
  isVerified: Boolean
}

type PlayedMachine {
  locationMachineXrefId: String!
  date:String
}

input PlayedMachineInput {
  locationMachineXrefId: String!
}

type VisitedLocation {
  locationId: String!
  dateVisited: String
}

input LocationVisitedInput {
  locationId: String!
}

type FavoriteGame {
  gameId: String
}

input FavoriteGameInput {
  gameId: String
}

type FavoriteMachine {
  locationMachineXrefId: String
}

input FavoriteMachineInput {
  locationMachineXrefId: String
}

type Friend{
  username:String
  dateAdded:String
}
type FriendInput{
  username:String
}

type Query {
  users: [User]
  userById(id: String!): User!
  userByUsername(username: String!): User!
  userRolesById(role:String!):[User]
}


type Mutation {
  addScore(userId: ID!, data: ScoreInput!): Score
  addFriend(userId: ID!)
  addScores(userId: ID!, data: [ScoreInput]!): [Score]
  addPlayedMachine(userId: ID!, data: PlayedMachineInput!): PlayedMachine
 addPlayedMachines(userId: ID!, data: [PlayedMachineInput]!): [PlayedMachine]
  addLocationVisited(userId: ID!, data: LocationVisitedInput!): LocationVisited
  addFavoriteGame(userId:ID!, data:FavoriteGameInput)
  addFavoriteMachine(userId:ID!, data:FavoritePinInput)
  addLocationsVisited(
    userId: ID!
    data: [LocationVisitedInput]!
  ): [LocationVisited]
  deleteUser(id: String!): Result
}
